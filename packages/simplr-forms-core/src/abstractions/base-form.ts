import * as React from "react";
import * as PropTypes from "prop-types";

import * as FormContracts from "../contracts/form";
import { FormStore } from "../stores/form-store";
import { FormError } from "../contracts/error";
import { ConstructFormError } from "../utils/form-error-helpers";
import { FSHContainer, FormStoresHandler } from "../stores/form-stores-handler";

export abstract class BaseForm<TProps extends FormContracts.FormProps, TState> extends React.Component<TProps, TState> {
    protected FormId: string;

    static childContextTypes = {
        FormId: PropTypes.string.isRequired
    };

    getChildContext(): FormContracts.FormChildContext {
        return {
            FormId: this.FormId,
        };
    }

    static defaultProps: FormContracts.FormProps = {
        destroyOnUnmount: true
    };

    constructor(props: FormContracts.FormProps) {
        super();
        this.registerForm(props);
    }

    protected get FormStoresHandler(): FormStoresHandler {
        return FSHContainer.FormStoresHandler;
    }

    protected get FormStore(): FormStore {
        return this.FormStoresHandler.GetStore(this.FormId);
    }

    protected ShouldFormSubmit() {
        if (this.props.forceSubmit === true) {
            return true;
        }
        return this.FormStore.GetState().Form.Error == null;
    }

    protected async Submit(result: Promise<void> | FormError | any): Promise<void> {
        let promise: Promise<void>;
        if (this.isPromise<void>(result)) {
            promise = result;
        } else {
            promise = new Promise<void>((resolve, reject) => {
                const error = ConstructFormError(result);
                if (error !== undefined) {
                    reject(result);
                    return;
                }
                resolve(result);
            });
        }
        await this.FormStore.Submit(promise);
    }

    componentWillUnmount() {
        if (this.props.destroyOnUnmount) {
            this.FormStoresHandler.UnregisterForm(this.FormId);
        }
    }

    abstract render(): JSX.Element | null;

    /*
     * Local helpers
     */
    private registerForm(props: FormContracts.FormProps) {
        let shouldNotDestroy = !props.destroyOnUnmount;
        if (props.formId == null) {
            if (shouldNotDestroy) {
                throw new Error("simplr-forms-core: destroyOnUnmount cannot be truthy when formId is not set.");
            } else {
                // props.formId is undefined, therefore this.FormId is generated by registering the form
                this.FormId = this.FormStoresHandler.RegisterForm(undefined, props.formStore);
            }
        } else {
            if (shouldNotDestroy) {
                // props.formId is given AND shouldNotDestroy AND form hasn't yet been registered
                if (this.FormStoresHandler.Exists(props.formId)) {
                    // The form has already been registered and we can use the given id
                    this.FormId = props.formId;
                } else {
                    // Register the form and use the generated formId
                    this.FormId = this.FormStoresHandler.RegisterForm(props.formId, props.formStore);
                }
            } else {
                // props.formId is given AND form should be destroyed
                this.FormId = this.FormStoresHandler.RegisterForm(props.formId, props.formStore);
            }
        }
    }

    private isPromise<T>(value: any): value is Promise<T> {
        return value != null && value.then != null && value.catch != null;
    }
}
