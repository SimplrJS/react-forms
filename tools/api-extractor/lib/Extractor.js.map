{"version":3,"sources":["Extractor.ts"],"names":[],"mappings":"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","file":"Extractor.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as ts from 'typescript';\r\nimport * as fsx from 'fs-extra';\r\nimport * as path from 'path';\r\nimport ApiPackage from './definitions/ApiPackage';\r\nimport DocItemLoader from './DocItemLoader';\r\nimport PackageJsonLookup from './PackageJsonLookup';\r\n\r\nexport type ApiErrorHandler = (message: string, fileName: string, lineNumber: number) => void;\r\n\r\n/**\r\n * Options for Extractor constructor.\r\n *\r\n * @public\r\n */\r\nexport interface IExtractorOptions {\r\n  /**\r\n   * Configuration for the TypeScript compiler.  The most important options to set are:\r\n   *\r\n   * - target: ts.ScriptTarget.ES5\r\n   * - module: ts.ModuleKind.CommonJS\r\n   * - moduleResolution: ts.ModuleResolutionKind.NodeJs\r\n   * - rootDir: inputFolder\r\n   */\r\n  compilerOptions: ts.CompilerOptions;\r\n\r\n  errorHandler?: ApiErrorHandler;\r\n}\r\n\r\n/**\r\n * Options for Extractor.analyze()\r\n *\r\n * @public\r\n */\r\nexport interface IExtractorAnalyzeOptions {\r\n  /**\r\n   * The entry point for the project.  This should correspond to the \"main\" field\r\n   * from NPM's package.json file.  If it is a relative path, it will be relative to\r\n   * the project folder described by IExtractorAnalyzeOptions.compilerOptions.\r\n   */\r\n  entryPointFile: string;\r\n\r\n  /**\r\n   * This can be used to specify other files that should be processed by the TypeScript compiler\r\n   * for some reason, e.g. a \"typings/tsd.d.ts\" file.  It is NOT necessary to specify files that\r\n   * are explicitly imported/required by the entryPointFile, since the compiler will trace\r\n   * (the transitive closure of) ordinary dependencies.\r\n   */\r\n  otherFiles?: string[];\r\n}\r\n\r\n/**\r\n * The main entry point for the \"api-extractor\" utility.  The Analyzer object invokes the\r\n * TypeScript Compiler API to analyze a project, and constructs the ApiItem\r\n * abstract syntax tree.\r\n *\r\n * @public\r\n */\r\nexport default class Extractor {\r\n  public readonly errorHandler: ApiErrorHandler;\r\n  public typeChecker: ts.TypeChecker;\r\n  public package: ApiPackage;\r\n  /**\r\n   * One DocItemLoader is needed per analyzer to look up external API members\r\n   * as needed.\r\n   */\r\n  public readonly docItemLoader: DocItemLoader;\r\n\r\n  public readonly packageJsonLookup: PackageJsonLookup;\r\n\r\n  private _compilerOptions: ts.CompilerOptions;\r\n\r\n  // If the entry point is \"C:\\Folder\\project\\src\\index.ts\" and the nearest package.json\r\n  // is \"C:\\Folder\\project\\package.json\", then the packageFolder is \"C:\\Folder\\project\"\r\n  private _packageFolder: string;\r\n\r\n  /**\r\n   * The default implementation of ApiErrorHandler, which merely writes to console.log().\r\n   */\r\n  public static defaultErrorHandler(message: string, fileName: string, lineNumber: number): void {\r\n    console.log(`ERROR: [${fileName}:${lineNumber}] ${message}`);\r\n  }\r\n\r\n  constructor(options: IExtractorOptions) {\r\n    this._compilerOptions = options.compilerOptions;\r\n    this.docItemLoader = new DocItemLoader(options.compilerOptions.rootDir);\r\n    this.packageJsonLookup = new PackageJsonLookup();\r\n    this.errorHandler = options.errorHandler || Extractor.defaultErrorHandler;\r\n  }\r\n\r\n  /**\r\n   * Getter for the package folder that Extractor is analyzing.\r\n   */\r\n  public get packageFolder(): string {\r\n    return this._packageFolder;\r\n  }\r\n\r\n  /**\r\n   * Analyzes the specified project.\r\n   */\r\n  public analyze(options: IExtractorAnalyzeOptions): void {\r\n    const rootFiles: string[] = [options.entryPointFile].concat(options.otherFiles || []);\r\n\r\n    const program: ts.Program = ts.createProgram(rootFiles, this._compilerOptions);\r\n\r\n    // This runs a full type analysis, and then augments the Abstract Syntax Tree (i.e. declarations)\r\n    // with semantic information (i.e. symbols).  The \"diagnostics\" are a subset of the everyday\r\n    // compile errors that would result from a full compilation.\r\n    for (const diagnostic of program.getSemanticDiagnostics()) {\r\n      this.reportError('TypeScript: ' + diagnostic.messageText, diagnostic.file, diagnostic.start);\r\n    }\r\n\r\n    this.typeChecker = program.getTypeChecker();\r\n\r\n    const rootFile: ts.SourceFile = program.getSourceFile(options.entryPointFile);\r\n    if (!rootFile) {\r\n      throw new Error('Unable to load file: ' + options.entryPointFile);\r\n    }\r\n\r\n    // Assign _packageFolder by probing upwards from entryPointFile until we find a package.json\r\n    const currentPath: string = path.resolve(options.entryPointFile);\r\n    // This is guaranteed to succeed since we do check prior to this point\r\n    this._packageFolder = this.packageJsonLookup.tryFindPackagePathUpwards(currentPath);\r\n\r\n    this.package = new ApiPackage(this, rootFile); // construct members\r\n    this.package.completeInitialization(); // creates ApiDocumentation\r\n    this.package.visitTypeReferencesForApiItem();\r\n  }\r\n\r\n  /**\r\n   * Reports an error message to the registered ApiErrorHandler.\r\n   */\r\n  public reportError(message: string, sourceFile: ts.SourceFile, start: number): void {\r\n    const lineNumber: number = sourceFile.getLineAndCharacterOfPosition(start).line;\r\n    this.errorHandler(message, sourceFile.fileName, lineNumber);\r\n  }\r\n\r\n  /**\r\n   * Scans for external package api files and loads them into the docItemLoader member before\r\n   * any API analysis begins.\r\n   *\r\n   * @param externalJsonCollectionPath - an absolute path to to the folder that contains all the external\r\n   * api json files.\r\n   * Ex: if externalJsonPath is './resources', then in that folder\r\n   * are 'es6-collections.api.json', etc.\r\n   */\r\n  public loadExternalPackages(externalJsonCollectionPath: string): void {\r\n    if (!externalJsonCollectionPath) {\r\n      return;\r\n    }\r\n\r\n    const files: string[] = fsx.readdirSync(externalJsonCollectionPath);\r\n    files.forEach(file => {\r\n      if (path.extname(file) === '.json') {\r\n        const externalJsonFilePath: string = path.join(externalJsonCollectionPath, file);\r\n        this.docItemLoader.loadPackageIntoCache(externalJsonFilePath, path.parse(file).name.split('.').shift());\r\n      }\r\n    });\r\n  }\r\n}\r\n"],"sourceRoot":"..\\src"}