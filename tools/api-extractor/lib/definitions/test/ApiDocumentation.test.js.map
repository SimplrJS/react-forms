{"version":3,"sources":["definitions/test/ApiDocumentation.test.ts"],"names":[],"mappings":"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","file":"definitions/test/ApiDocumentation.test.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\n/// <reference types=\"mocha\" />\r\n\r\nimport { assert } from 'chai';\r\nimport * as ts from 'typescript';\r\nimport * as path from 'path';\r\nimport Extractor from '../../Extractor';\r\nimport ApiStructuredType from '../ApiStructuredType';\r\nimport ApiDocumentation, { ReleaseTag } from '../ApiDocumentation';\r\n\r\n/* tslint:disable:no-function-expression - Mocha uses a poorly scoped \"this\" pointer */\r\n\r\nconst capturedErrors: {\r\n  message: string;\r\n  fileName: string;\r\n  lineNumber: number;\r\n}[] = [];\r\n\r\nfunction testErrorHandler(message: string, fileName: string, lineNumber: number): void {\r\n  capturedErrors.push({ message, fileName, lineNumber });\r\n}\r\n\r\nconst inputFolder: string = './testInputs/example2';\r\nconst compilerOptions: ts.CompilerOptions = {\r\n  target: ts.ScriptTarget.ES5,\r\n  module: ts.ModuleKind.CommonJS,\r\n  moduleResolution: ts.ModuleResolutionKind.NodeJs,\r\n  rootDir: inputFolder,\r\n  typeRoots: ['./'] // We need to ignore @types in these tests\r\n};\r\nconst extractor: Extractor = new Extractor({\r\n  compilerOptions: compilerOptions,\r\n  errorHandler: testErrorHandler\r\n});\r\n\r\nextractor.loadExternalPackages('./testInputs/external-api-json');\r\n// Run the analyzer once to be used by unit tests\r\nextractor.analyze({\r\n  entryPointFile: path.join(inputFolder, 'src/index.ts')\r\n});\r\n\r\n// These warnings would normally be printed at the bottom\r\n// of the source package's '*.api.ts' file.\r\nconst warnings: string[] = [];\r\n\r\nconst myDocumentedClass: ApiStructuredType = extractor.package.getSortedMemberItems()\r\n.filter(apiItem => apiItem.name === 'MyDocumentedClass')[0] as ApiStructuredType;\r\n\r\ndescribe('ApiDocumentation tests', function (): void {\r\n  this.timeout(10000);\r\n\r\n  describe('ApiDocumentation internal methods', function (): void {\r\n    const apiDoc: ApiDocumentation = new ApiDocumentation(\r\n      'Some summary\\n@remarks and some remarks\\n@public',\r\n      extractor.docItemLoader,\r\n      extractor,\r\n      console.log,\r\n      warnings\r\n    );\r\n  });\r\n\r\n  describe('Documentation Parser Tests', function (): void {\r\n    it('Should report errors', function (): void {\r\n      /**\r\n       * To view the expected errors see:\r\n       * - testInputs/example2/folder/MyDocumentedClass (10  errors)\r\n       */\r\n\r\n      assert.equal(capturedErrors.length, 8);\r\n      assert.equal(capturedErrors[0].message, 'A summary block is not allowed here, because the @inheritdoc'\r\n        + ' target provides the summary');\r\n      assert.equal(capturedErrors[1].message, 'The JSDoc tag \"@badAedocTag\" is not supported by AEDoc');\r\n      assert.equal(capturedErrors[2].message, 'Invalid call to _tokenizeInline()');\r\n      assert.equal(capturedErrors[3].message, 'The {@link} tag must include a URL or API item reference');\r\n      assert.equal(capturedErrors[4].message, 'Unexpected text in AEDoc comment: \"can not contain a tag\"');\r\n      assert.equal(capturedErrors[5].message, 'More than one release tag (@alpha, @beta, etc) was specified');\r\n      assert.equal(capturedErrors[6].message, 'An API item reference must use the notation:'\r\n        + ' \"@scopeName/packageName:exportName.memberName\"'\r\n      );\r\n      assert.equal(capturedErrors[7].message, 'The @inheritdoc target has been marked as @deprecated.  '\r\n        + 'Add a @deprecated message here, or else remove the @inheritdoc relationship.');\r\n    });\r\n\r\n    it('Should parse release tag', function (): void {\r\n      const expectedReleaseTag: ReleaseTag = ReleaseTag.Public;\r\n\r\n      const actualDoc: ApiDocumentation = myDocumentedClass ? myDocumentedClass.documentation : undefined;\r\n\r\n      assert.isObject(actualDoc);\r\n      assert.equal(actualDoc.releaseTag, expectedReleaseTag);\r\n    });\r\n  });\r\n});\r\n"],"sourceRoot":"..\\..\\..\\src"}