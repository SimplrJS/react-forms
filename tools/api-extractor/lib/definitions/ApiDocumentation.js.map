{"version":3,"sources":["definitions/ApiDocumentation.ts"],"names":[],"mappings":"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","file":"definitions/ApiDocumentation.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\n/* tslint:disable:no-bitwise */\r\n\r\nimport ApiItem, { ApiItemKind } from './ApiItem';\r\nimport ApiPackage from './ApiPackage';\r\nimport DocElementParser from '../DocElementParser';\r\nimport { IDocElement, IParam, ICodeLinkElement } from '../IDocElement';\r\nimport { IDocItem } from '../IDocItem';\r\nimport ApiDefinitionReference, { IApiDefinintionReferenceParts } from '../ApiDefinitionReference';\r\nimport Token, { TokenType } from '../Token';\r\nimport Tokenizer from '../Tokenizer';\r\nimport Extractor from '../Extractor';\r\nimport ResolvedApiItem from '../ResolvedApiItem';\r\n\r\n/**\r\n  * A \"release tag\" is an AEDoc tag which indicates whether an ApiItem definition\r\n  * is considered Public API for third party developers, as well as its release\r\n  * stage (alpha, beta, etc).\r\n  * @see https://onedrive.visualstudio.com/DefaultCollection/SPPPlat/_git/sp-client\r\n  *      ?path=/common/docs/ApiPrinciplesAndProcess.md\r\n  */\r\nexport enum ReleaseTag {\r\n  /**\r\n   * No release tag was specified in the AEDoc summary.\r\n   */\r\n  None = 0,\r\n  /**\r\n   * Indicates that an API item is meant only for usage by other NPM packages from the same\r\n   * maintainer. Third parties should never use \"internal\" APIs. (To emphasize this, their\r\n   * names are prefixed by underscores.)\r\n   */\r\n  Internal = 1,\r\n  /**\r\n   * Indicates that an API item is eventually intended to be public, but currently is in an\r\n   * early stage of development. Third parties should not use \"alpha\" APIs.\r\n   */\r\n  Alpha = 2,\r\n  /**\r\n   * Indicates that an API item has been released in an experimental state. Third parties are\r\n   * encouraged to try it and provide feedback. However, a \"beta\" API should NOT be used\r\n   * in production.\r\n   */\r\n  Beta = 3,\r\n  /**\r\n   * Indicates that an API item has been officially released. It is part of the supported\r\n   * contract (e.g. SemVer) for a package.\r\n   */\r\n  Public = 4\r\n}\r\n\r\n/**\r\n * A dependency for ApiDocumentation constructor that abstracts away the function\r\n * of resolving an API definition reference.\r\n *\r\n * @internalremarks reportError() will be called if the apiDefinitionRef is to a non local\r\n * item and the package of that non local item can not be found.\r\n * If there is no package given and an  item can not be found we will return undefined.\r\n * Once we support local references, we can be sure that reportError will only be\r\n * called once if the item can not be found (and undefined will be retured by the reference\r\n * function).\r\n */\r\nexport interface IReferenceResolver {\r\n  resolve(\r\n    apiDefinitionRef: ApiDefinitionReference,\r\n    apiPackage: ApiPackage,\r\n    warnings: string[]): ResolvedApiItem;\r\n}\r\n\r\nexport default class ApiDocumentation {\r\n  /**\r\n   * Match AEDoc block tags and inline tags\r\n   * Example \"@a @b@c d@e @f {whatever} {@link a} { @something } \\@g\" => [\"@a\", \"@f\", \"{@link a}\", \"{ @something }\"]\r\n   */\r\n  public static readonly _aedocTagsRegex: RegExp = /{\\s*@(\\\\{|\\\\}|[^{}])*}|(?:^|\\s)(\\@[a-z_]+)(?=\\s|$)/gi;\r\n\r\n  // For guidance about using these tags, please see this documentation:\r\n  // https://github.com/Microsoft/web-build-tools/wiki/API-Extractor-~-AEDoc-tags\r\n  private static _allowedRegularAedocTags: string[] = [\r\n    // (alphabetical order)\r\n    '@alpha',\r\n    '@beta',\r\n    '@betadocumentation',\r\n    '@internal',\r\n    '@internalremarks',\r\n    '@param',\r\n    '@preapproved',\r\n    '@public',\r\n    '@returns',\r\n    '@see',\r\n    '@deprecated',\r\n    '@readonly',\r\n    '@remarks'\r\n  ];\r\n\r\n  private static _allowedInlineAedocTags: string[] = [\r\n    // (alphabetical order)\r\n    '@inheritdoc',\r\n    '@link'\r\n  ];\r\n\r\n  /**\r\n   * The original AEDoc comment.\r\n   *\r\n   * Example: \"This is a summary. \\{\\@link a\\} \\@remarks These are remarks.\"\r\n   */\r\n  public originalAedoc: string;\r\n\r\n  /**\r\n   * The docComment text string split into an array of ITokenItems.  The tokens are essentially either\r\n   * AEDoc tags (which start with the \"@\" character) or substrings containing the\r\n   * remaining text.  The array can be empty, but not undefined.\r\n   * Example:\r\n   * docComment       = \"Example Function\\n@returns the number of items\\n@internal  \"\r\n   * docCommentTokens = [\r\n   *  {tokenType: 'text', parameter: 'Example Function\\n'},\r\n   *  {tokenType: '\\@returns', parameter: ''}\r\n   *  {tokenType: 'text', parameter: 'the number of items\\n'}\r\n   *  {tokenType: '@internal', parameter: ''}\r\n   * ];\r\n   */\r\n  public docCommentTokens: Token[];\r\n\r\n   /**\r\n   * docCommentTokens that are parsed into Doc Elements.\r\n   */\r\n  public summary: IDocElement[];\r\n  public deprecatedMessage: IDocElement[];\r\n  public remarks: IDocElement[];\r\n  public returnsMessage: IDocElement[];\r\n  public parameters: { [name: string]: IParam; };\r\n\r\n  /**\r\n   * A list of \\@link elements to be post-processed after all basic documentation has been created\r\n   * for all items in the project.  We save the processing for later because we need ReleaseTag\r\n   * information before we can determine whether a link element is valid.\r\n   * Example: If API item A has a \\@link in its documentation to API item B, then B must not\r\n   * have ReleaseTag.Internal.\r\n   */\r\n  public incompleteLinks: ICodeLinkElement[];\r\n\r\n  /**\r\n   * A list of 'Token' objects that have been recognized as \\@inheritdoc tokens that will be processed\r\n   * after the basic documentation for all API items is complete. We postpone the processing\r\n   * because we need ReleaseTag information before we can determine whether an \\@inheritdoc token\r\n   * is valid.\r\n   */\r\n  public incompleteInheritdocs: Token[];\r\n\r\n  /**\r\n   * A \"release tag\" is an AEDoc tag which indicates whether this definition\r\n   * is considered Public API for third party developers, as well as its release\r\n   * stage (alpha, beta, etc).\r\n   */\r\n  public releaseTag: ReleaseTag;\r\n\r\n  /**\r\n   * True if the \"@preapproved\" tag was specified.\r\n   * Indicates that this internal API is exempt from further reviews.\r\n   */\r\n  public preapproved?: boolean;\r\n  public deprecated?: string;\r\n  public internalremarks?: string;\r\n  public paramDocs?: Map<string, string>;\r\n  public returns?: string;\r\n  public see?: string[];\r\n  public isDocBeta?: boolean;\r\n  public isDocInherited?: boolean;\r\n  public isDocInheritedDeprecated?: boolean;\r\n  public isOverride?: boolean;\r\n  public hasReadOnlyTag?: boolean;\r\n  public warnings: string[];\r\n\r\n  /**\r\n   * A function type interface that abstracts away resolving\r\n   * an API definition reference to an item that has friendly\r\n   * accessible ApiItem properties.\r\n   *\r\n   * Ex: this is useful in the case of parsing inheritdoc expressions,\r\n   * in the sense that we do not know if we the inherited documentation\r\n   * is coming from an ApiItem or a IDocItem.\r\n   */\r\n  public referenceResolver: IReferenceResolver;\r\n\r\n  /**\r\n   * We need the extractor to access the package that this ApiItem\r\n   * belongs to in order to resolve references.\r\n   */\r\n  public extractor: Extractor;\r\n\r\n  /**\r\n   * True if any errors were encountered while parsing the AEDoc tokens.\r\n   * This is used to suppress other \"collateral damage\" errors, e.g. if \"@public\" was\r\n   * misspelled then we shouldn't also complain that the \"@public\" tag is missing.\r\n   */\r\n  public failedToParse: boolean;\r\n\r\n  public readonly reportError: (message: string) => void;\r\n\r\n  constructor(docComment: string,\r\n    referenceResolver: IReferenceResolver,\r\n    extractor: Extractor,\r\n    errorLogger: (message: string) => void,\r\n    warnings: string[]) {\r\n\r\n    this.reportError = (message: string) => {\r\n      errorLogger(message);\r\n      this.failedToParse = true;\r\n    };\r\n\r\n    this.originalAedoc = docComment;\r\n    this.referenceResolver = referenceResolver;\r\n    this.extractor = extractor;\r\n    this.reportError = errorLogger;\r\n    this.parameters = {};\r\n    this.warnings = warnings;\r\n    this._parseDocs();\r\n  }\r\n\r\n  /**\r\n   * Executes the implementation details involved in completing the documentation initialization.\r\n   * Currently completes link and inheritdocs.\r\n   */\r\n  public completeInitialization(warnings: string[]): void {\r\n    // Ensure links are valid\r\n    this._completeLinks();\r\n    // Ensure inheritdocs are valid\r\n    this._completeInheritdocs(warnings);\r\n  }\r\n\r\n  protected _parseDocs(): void {\r\n    this.summary = [];\r\n    this.returnsMessage = [];\r\n    this.deprecatedMessage = [];\r\n    this.remarks = [];\r\n    this.incompleteLinks = [];\r\n    this.incompleteInheritdocs = [];\r\n    this.releaseTag = ReleaseTag.None;\r\n    const tokenizer: Tokenizer = new Tokenizer(this.originalAedoc, this.reportError);\r\n    this.summary = DocElementParser.parse(this, tokenizer);\r\n\r\n    let releaseTagCount: number = 0;\r\n    let parsing: boolean = true;\r\n\r\n      while (parsing) {\r\n      const token: Token = tokenizer.peekToken();\r\n      if (!token) {\r\n        parsing = false; // end of stream\r\n        // Report error if @inheritdoc is deprecated but no @deprecated tag present here\r\n        if (this.isDocInheritedDeprecated && this.deprecatedMessage.length === 0) {\r\n          // if this documentation inherits docs from a deprecated API item, then\r\n          // this documentation must either have a deprecated message or it must\r\n          // not use the @inheritdoc and copy+paste the documentation\r\n          this.reportError(`A deprecation message must be included after the @deprecated tag.`);\r\n        }\r\n        break;\r\n      }\r\n\r\n      if (token.type === TokenType.BlockTag) {\r\n        switch (token.tag) {\r\n          case '@remarks':\r\n            tokenizer.getToken();\r\n            this._checkInheritDocStatus(token.tag);\r\n            this.remarks = DocElementParser.parse(this, tokenizer);\r\n            break;\r\n          case '@returns':\r\n            tokenizer.getToken();\r\n            this._checkInheritDocStatus(token.tag);\r\n            this.returnsMessage = DocElementParser.parse(this, tokenizer);\r\n            break;\r\n          case '@param':\r\n            tokenizer.getToken();\r\n            this._checkInheritDocStatus(token.tag);\r\n            const param: IParam = this._parseParam(tokenizer);\r\n            if (param) {\r\n               this.parameters[param.name] = param;\r\n            }\r\n            break;\r\n          case '@deprecated':\r\n            tokenizer.getToken();\r\n            this.deprecatedMessage = DocElementParser.parse(this, tokenizer);\r\n            if (!this.deprecatedMessage || this.deprecatedMessage.length === 0) {\r\n              this.reportError(`deprecated description required after @deprecated AEDoc tag.`);\r\n            }\r\n            break;\r\n          case '@internalremarks':\r\n            // parse but discard\r\n            tokenizer.getToken();\r\n            DocElementParser.parse(this, tokenizer);\r\n            break;\r\n          case '@public':\r\n            tokenizer.getToken();\r\n            this.releaseTag = ReleaseTag.Public;\r\n            ++releaseTagCount;\r\n            break;\r\n          case '@internal':\r\n            tokenizer.getToken();\r\n            this.releaseTag = ReleaseTag.Internal;\r\n            ++releaseTagCount;\r\n            break;\r\n          case '@alpha':\r\n            tokenizer.getToken();\r\n            this.releaseTag = ReleaseTag.Alpha;\r\n            ++releaseTagCount;\r\n            break;\r\n          case '@beta':\r\n            tokenizer.getToken();\r\n            this.releaseTag = ReleaseTag.Beta;\r\n            ++releaseTagCount;\r\n            break;\r\n          case '@preapproved':\r\n            tokenizer.getToken();\r\n            this.preapproved = true;\r\n            break;\r\n          case '@readonly':\r\n            tokenizer.getToken();\r\n            this.hasReadOnlyTag = true;\r\n            break;\r\n          case '@betadocumentation':\r\n            tokenizer.getToken();\r\n            this.isDocBeta = true;\r\n            break;\r\n          default:\r\n            tokenizer.getToken();\r\n            this._reportBadAedocTag(token);\r\n        }\r\n      } else if (token.type === TokenType.InlineTag) {\r\n        switch (token.tag) {\r\n          case '@inheritdoc':\r\n            DocElementParser.parse(this, tokenizer);\r\n            break;\r\n          case '@link':\r\n            DocElementParser.parse(this, tokenizer);\r\n            break;\r\n          default:\r\n            tokenizer.getToken();\r\n            this._reportBadAedocTag(token);\r\n            break;\r\n        }\r\n      } else if (token.type === TokenType.Text)  {\r\n        tokenizer.getToken();\r\n        // Shorten \"This is too long text\" to \"This is...\"\r\n        const MAX_LENGTH: number = 40;\r\n        let problemText: string = token.text.trim();\r\n        if (problemText.length > MAX_LENGTH) {\r\n          problemText = problemText.substr(0, MAX_LENGTH - 3).trim() + '...';\r\n        }\r\n        this.reportError(`Unexpected text in AEDoc comment: \"${problemText}\"`);\r\n      } else {\r\n        tokenizer.getToken();\r\n        // This would be a program bug\r\n        this.reportError(`Unexpected token: ${token.type} ${token.tag} \"${token.text}\"`);\r\n      }\r\n    }\r\n\r\n    if (releaseTagCount > 1) {\r\n      this.reportError('More than one release tag (@alpha, @beta, etc) was specified');\r\n    }\r\n\r\n    if (this.preapproved && this.releaseTag !== ReleaseTag.Internal) {\r\n      this.reportError('The @preapproved tag may only be applied to @internal definitions');\r\n      this.preapproved = false;\r\n    }\r\n  }\r\n\r\n  protected _parseParam(tokenizer: Tokenizer): IParam {\r\n    const paramDescriptionToken: Token = tokenizer.getToken();\r\n    if (!paramDescriptionToken) {\r\n      this.reportError('The @param tag is missing a parameter description');\r\n      return;\r\n    }\r\n    const hyphenIndex: number = paramDescriptionToken ? paramDescriptionToken.text.indexOf('-') : -1;\r\n    if (hyphenIndex < 0) {\r\n      this.reportError('The @param tag is missing the hyphen that delimits the parameter name '\r\n        + ' and description');\r\n      return;\r\n    } else {\r\n      const name: string = paramDescriptionToken.text.slice(0, hyphenIndex).trim();\r\n      const comment: string = paramDescriptionToken.text.substr(hyphenIndex + 1).trim();\r\n\r\n      if (!comment) {\r\n        this.reportError('The @param tag is missing a parameter description');\r\n        return;\r\n      }\r\n\r\n      const commentTextElement: IDocElement = DocElementParser.makeTextElement(comment);\r\n      // Full param description may contain additional Tokens (Ex: @link)\r\n      const remainingElements: IDocElement[] = DocElementParser.parse(this, tokenizer);\r\n      const descriptionElements: IDocElement[] = [commentTextElement].concat(remainingElements);\r\n\r\n      const paramDocElement: IParam = {\r\n        name: name,\r\n        description: descriptionElements\r\n      };\r\n      return paramDocElement;\r\n      }\r\n  }\r\n\r\n  /**\r\n   * A processing of linkDocElements that refer to an ApiDefinitionReference. This method\r\n   * ensures that the reference is to an API item that is not 'Internal'.\r\n   */\r\n  private _completeLinks(): void {\r\n    while (this.incompleteLinks.length) {\r\n      const codeLink: ICodeLinkElement = this.incompleteLinks.pop();\r\n      const parts: IApiDefinintionReferenceParts = {\r\n        scopeName: codeLink.scopeName,\r\n        packageName: codeLink.packageName,\r\n        exportName: codeLink.exportName,\r\n        memberName: codeLink.memberName\r\n      };\r\n\r\n      const apiDefinitionRef: ApiDefinitionReference = ApiDefinitionReference.createFromParts(parts);\r\n      const resolvedApiItem: ResolvedApiItem =  this.referenceResolver.resolve(\r\n        apiDefinitionRef,\r\n        this.extractor.package,\r\n        this.warnings\r\n      );\r\n\r\n      // If the apiDefinitionRef can not be found the resolvedApiItem will be\r\n      // undefined and an error will have been reported via this.reportError\r\n      if (resolvedApiItem) {\r\n        if (resolvedApiItem.releaseTag === ReleaseTag.Internal\r\n          || resolvedApiItem.releaseTag === ReleaseTag.Alpha) {\r\n\r\n          this.reportError('The {@link} tag references an @internal or @alpha API item, '\r\n            + 'which will not appear in the generated documentation');\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * A processing of inheritdoc 'Tokens'. This processing occurs after we have created documentation\r\n   * for all API items.\r\n   */\r\n  private _completeInheritdocs(warnings: string[]): void {\r\n    while (this.incompleteInheritdocs.length) {\r\n      const token: Token = this.incompleteInheritdocs.pop();\r\n      DocElementParser.parseInheritDoc(this, token, warnings);\r\n    }\r\n  }\r\n\r\n  private _reportBadAedocTag(token: Token): void {\r\n    const supportsRegular: boolean = ApiDocumentation._allowedRegularAedocTags.indexOf(token.tag) >= 0;\r\n    const supportsInline: boolean = ApiDocumentation._allowedInlineAedocTags.indexOf(token.tag) >= 0;\r\n\r\n    if (!supportsRegular && !supportsInline) {\r\n      this.reportError(`The JSDoc tag \\\"${token.tag}\\\" is not supported by AEDoc`);\r\n      return;\r\n    }\r\n\r\n    if (token.type === TokenType.InlineTag && !supportsInline) {\r\n      this.reportError(`The AEDoc tag \\\"${token.tag}\\\" must use the inline tag notation (i.e. with curly braces)`);\r\n      return;\r\n    }\r\n    if (token.type === TokenType.BlockTag && !supportsRegular) {\r\n      this.reportError(`The AEDoc tag \\\"${token.tag}\\\" must use the block tag notation (i.e. no curly braces)`);\r\n      return;\r\n    }\r\n\r\n    this.reportError(`The AEDoc tag \\\"${token.tag}\\\" is not supported in this context`);\r\n    return;\r\n  }\r\n\r\n  private _checkInheritDocStatus(aedocTag: string): void {\r\n    if (this.isDocInherited) {\r\n      this.reportError(`The ${aedocTag} tag may not be used because this state is provided by the @inheritdoc target`);\r\n    }\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\src"}