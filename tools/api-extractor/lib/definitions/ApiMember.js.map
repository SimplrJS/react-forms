{"version":3,"sources":["definitions/ApiMember.ts"],"names":[],"mappings":"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","file":"definitions/ApiMember.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as ts from 'typescript';\r\nimport ApiItem, { IApiItemOptions } from './ApiItem';\r\nimport ApiStructuredType from './ApiStructuredType';\r\nimport PrettyPrinter from '../PrettyPrinter';\r\nimport TypeScriptHelpers from '../TypeScriptHelpers';\r\n\r\nexport enum AccessModifier {\r\n  Private,\r\n  Protected,\r\n  Public\r\n}\r\n\r\n/**\r\n * This class is part of the ApiItem abstract syntax tree.  It represents syntax following\r\n * these types of patterns:\r\n *\r\n * - \"someName: SomeTypeName;\"\r\n * - \"someName?: SomeTypeName;\"\r\n * - \"someName: { someOtherName: SomeOtherTypeName }\", i.e. involving a type literal expression\r\n * - \"someFunction(): void;\"\r\n *\r\n * ApiMember is used to represent members of classes, interfaces, and nested type literal expressions.\r\n */\r\nexport default class ApiMember extends ApiItem {\r\n  /**\r\n   * True if the member is an optional field value, indicated by a question mark (\"?\") after the name\r\n   */\r\n  public accessModifier: AccessModifier;\r\n  public isOptional: boolean;\r\n  public isStatic: boolean;\r\n\r\n  /**\r\n   * The type of the member item, if specified as a type literal expression.  Otherwise,\r\n   * this field is undefined.\r\n   */\r\n  public typeLiteral: ApiStructuredType;\r\n\r\n  constructor(options: IApiItemOptions) {\r\n    super(options);\r\n\r\n    this.typeLiteral = undefined;\r\n\r\n    const memberSignature: ts.PropertySignature = this.declaration as ts.PropertySignature;\r\n\r\n    this.isOptional = !!memberSignature.questionToken;\r\n\r\n    // Modifiers\r\n    if (memberSignature.modifiers) {\r\n      for (const modifier of memberSignature.modifiers) {\r\n        if (modifier.kind === ts.SyntaxKind.PublicKeyword) {\r\n          this.accessModifier = AccessModifier.Public;\r\n        } else if (modifier.kind === ts.SyntaxKind.ProtectedKeyword) {\r\n          this.accessModifier = AccessModifier.Protected;\r\n        } else if (modifier.kind === ts.SyntaxKind.PrivateKeyword) {\r\n          this.accessModifier = AccessModifier.Private;\r\n        } else if (modifier.kind === ts.SyntaxKind.StaticKeyword) {\r\n          this.isStatic = true;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (memberSignature.type && memberSignature.type.kind === ts.SyntaxKind.TypeLiteral) {\r\n      const propertyTypeDeclaration: ts.Declaration = memberSignature.type as ts.Node as ts.Declaration;\r\n      const propertyTypeSymbol: ts.Symbol = TypeScriptHelpers.getSymbolForDeclaration(propertyTypeDeclaration);\r\n\r\n      const typeLiteralOptions: IApiItemOptions = {\r\n        extractor: this.extractor,\r\n        declaration: propertyTypeDeclaration,\r\n        declarationSymbol: propertyTypeSymbol,\r\n        jsdocNode: propertyTypeDeclaration\r\n      };\r\n\r\n      this.typeLiteral = new ApiStructuredType(typeLiteralOptions);\r\n      this.innerItems.push(this.typeLiteral);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @virtual\r\n   */\r\n  public visitTypeReferencesForApiItem(): void {\r\n    super.visitTypeReferencesForApiItem();\r\n\r\n    if (this.declaration.kind !== ts.SyntaxKind.PropertySignature) {\r\n      this.visitTypeReferencesForNode(this.declaration);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns a text string such as \"someName?: SomeTypeName;\", or in the case of a type\r\n   * literal expression, returns a text string such as \"someName?:\".\r\n   */\r\n  public getDeclarationLine(property?: {type: string; readonly: boolean}): string {\r\n    if (this.typeLiteral || !!property) {\r\n      const accessModifier: string =\r\n        this.accessModifier ? AccessModifier[this.accessModifier].toLowerCase() : undefined;\r\n\r\n      let result: string = accessModifier ? `${accessModifier} ` : '';\r\n      result += this.isStatic ? 'static ' : '';\r\n      result += property && property.readonly ? 'readonly ' : '';\r\n      result += `${this.name}`;\r\n      result += this.isOptional ? '?' : '';\r\n      result += ':';\r\n      result += !this.typeLiteral && property && property.type ? ` ${property.type};` : '';\r\n      return result;\r\n    } else {\r\n      return PrettyPrinter.getDeclarationSummary(this.declaration);\r\n    }\r\n  }\r\n\r\n}\r\n"],"sourceRoot":"..\\..\\src"}