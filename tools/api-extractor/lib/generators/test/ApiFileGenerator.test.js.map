{"version":3,"sources":["generators/test/ApiFileGenerator.test.ts"],"names":[],"mappings":"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","file":"generators/test/ApiFileGenerator.test.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\n/// <reference types=\"mocha\" />\r\n\r\nimport { assert } from 'chai';\r\nimport * as ts from 'typescript';\r\nimport * as fsx from 'fs-extra';\r\nimport * as path from 'path';\r\nimport Extractor from '../../Extractor';\r\nimport ApiFileGenerator from '../../generators/ApiFileGenerator';\r\n\r\n/* tslint:disable:no-function-expression - Mocha uses a poorly scoped \"this\" pointer */\r\n\r\nfunction assertFileMatchesExpected(actualFilename: string, expectedFilename: string): void {\r\n  const actualContent: string = fsx.readFileSync(actualFilename).toString('utf8');\r\n  const expectedContent: string = fsx.readFileSync(expectedFilename).toString('utf8');\r\n\r\n  assert(ApiFileGenerator.areEquivalentApiFileContents(actualContent, expectedContent),\r\n    'The file content does not match the expected value:'\r\n    + '\\nEXPECTED: ' + expectedFilename\r\n    + '\\nACTUAL: ' + actualFilename);\r\n}\r\n\r\nlet capturedErrors: {\r\n  message: string;\r\n  fileName: string;\r\n  lineNumber: number;\r\n}[] = [];\r\n\r\nfunction testErrorHandler(message: string, fileName: string, lineNumber: number): void {\r\n  capturedErrors.push({ message, fileName, lineNumber });\r\n}\r\n\r\nfunction assertCapturedErrors(expectedMessages: string[]): void {\r\n  assert.deepEqual(capturedErrors.map(x => x.message), expectedMessages,\r\n    'The captured errors did not match the expected output.');\r\n}\r\n\r\ndescribe('ApiFileGenerator tests', function (): void {\r\n  this.timeout(10000);\r\n\r\n  describe('Basic Tests', function (): void {\r\n    it('Example 1', function (): void {\r\n      const inputFolder: string = './testInputs/example1';\r\n      const outputFile: string = './lib/example1-output.api.ts';\r\n      const expectedFile: string = path.join(inputFolder, 'example1-output.api.ts');\r\n\r\n      const compilerOptions: ts.CompilerOptions = {\r\n        target: ts.ScriptTarget.ES5,\r\n        module: ts.ModuleKind.CommonJS,\r\n        moduleResolution: ts.ModuleResolutionKind.NodeJs,\r\n        rootDir: inputFolder,\r\n        typeRoots: ['./'] // We need to ignore @types in these tests\r\n      };\r\n      const extractor: Extractor = new Extractor({\r\n        compilerOptions: compilerOptions,\r\n        errorHandler: testErrorHandler\r\n      });\r\n\r\n      extractor.analyze({\r\n        entryPointFile: path.join(inputFolder, 'index.ts')\r\n      });\r\n\r\n      const apiFileGenerator: ApiFileGenerator = new ApiFileGenerator();\r\n      apiFileGenerator.writeApiFile(outputFile, extractor);\r\n\r\n      assertFileMatchesExpected(outputFile, expectedFile);\r\n\r\n      /**\r\n       * Errors can be found in testInputs/folder/MyClass\r\n       */\r\n      assertCapturedErrors([\r\n        'The JSDoc tag \"@badAedocTag\" is not supported by AEDoc',\r\n        'Unexpected text in AEDoc comment: \"(Error #1 is the bad tag) Text can no...\"'\r\n      ]);\r\n    });\r\n\r\n    it('Example 2', function (): void {\r\n      const inputFolder: string = './testInputs/example2';\r\n      const outputFile: string = './lib/example2-output.api.ts';\r\n      const expectedFile: string = path.join(inputFolder, 'example2-output.api.ts');\r\n\r\n      const compilerOptions: ts.CompilerOptions = {\r\n        target: ts.ScriptTarget.ES5,\r\n        module: ts.ModuleKind.CommonJS,\r\n        moduleResolution: ts.ModuleResolutionKind.NodeJs,\r\n        rootDir: inputFolder,\r\n        typeRoots: ['./'] // We need to ignore @types in these tests\r\n      };\r\n      const extractor: Extractor = new Extractor({\r\n        compilerOptions: compilerOptions,\r\n        errorHandler: testErrorHandler\r\n      });\r\n\r\n      extractor.analyze({\r\n        entryPointFile: path.join(inputFolder, 'src/index.ts')\r\n      });\r\n\r\n      const apiFileGenerator: ApiFileGenerator = new ApiFileGenerator();\r\n      apiFileGenerator.writeApiFile(outputFile, extractor);\r\n\r\n      assertFileMatchesExpected(outputFile, expectedFile);\r\n    });\r\n\r\n    it('Example 4', function (): void {\r\n      capturedErrors = [];\r\n\r\n      const inputFolder: string = './testInputs/example4';\r\n      const outputFile: string = './lib/example4-output.api.ts';\r\n      const expectedFile: string = path.join(inputFolder, 'example4-output.api.ts');\r\n\r\n      const compilerOptions: ts.CompilerOptions = {\r\n        target: ts.ScriptTarget.ES5,\r\n        module: ts.ModuleKind.CommonJS,\r\n        moduleResolution: ts.ModuleResolutionKind.NodeJs,\r\n        rootDir: inputFolder,\r\n        typeRoots: ['./'] // We need to ignore @types in these tests\r\n      };\r\n      const extractor: Extractor = new Extractor({\r\n        compilerOptions: compilerOptions,\r\n        errorHandler: testErrorHandler\r\n      });\r\n\r\n      extractor.analyze({\r\n        entryPointFile: path.join(inputFolder, 'src/index.ts')\r\n      });\r\n\r\n      const apiFileGenerator: ApiFileGenerator = new ApiFileGenerator();\r\n      apiFileGenerator.writeApiFile(outputFile, extractor);\r\n\r\n      assertFileMatchesExpected(outputFile, expectedFile);\r\n      assert.equal(capturedErrors.length, 0);\r\n    });\r\n  });\r\n});\r\n"],"sourceRoot":"..\\..\\..\\src"}