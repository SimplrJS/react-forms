{"version":3,"sources":["generators/test/ApiJsonGenerator.test.ts"],"names":[],"mappings":"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","file":"generators/test/ApiJsonGenerator.test.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\n/// <reference types=\"mocha\" />\r\n\r\nimport * as ts from 'typescript';\r\nimport * as path from 'path';\r\nimport Extractor from '../../Extractor';\r\nimport ApiJsonGenerator from '../../generators/ApiJsonGenerator';\r\nimport TestFileComparer from '../../TestFileComparer';\r\n/* tslint:disable:no-function-expression - Mocha uses a poorly scoped \"this\" pointer */\r\n\r\nconst capturedErrors: {\r\n  message: string;\r\n  fileName: string;\r\n  lineNumber: number;\r\n}[] = [];\r\n\r\nfunction testErrorHandler(message: string, fileName: string, lineNumber: number): void {\r\n  capturedErrors.push({ message, fileName, lineNumber });\r\n}\r\n\r\ndescribe('ApiJsonGenerator tests', function (): void {\r\n  this.timeout(10000);\r\n\r\n  describe('Basic Tests', function (): void {\r\n    it('Example 1', function (): void {\r\n      const inputFolder: string = './testInputs/example1';\r\n      const outputFile: string = './lib/example1-output.json';\r\n      const expectedFile: string = path.join(inputFolder, 'example1-output.json');\r\n\r\n      const compilerOptions: ts.CompilerOptions = {\r\n        target: ts.ScriptTarget.ES5,\r\n        module: ts.ModuleKind.CommonJS,\r\n        moduleResolution: ts.ModuleResolutionKind.NodeJs,\r\n        rootDir: inputFolder,\r\n        typeRoots: ['./'] // We need to ignore @types in these tests\r\n      };\r\n      const extractor: Extractor = new Extractor({\r\n        compilerOptions: compilerOptions,\r\n        errorHandler: testErrorHandler\r\n      });\r\n\r\n      extractor.loadExternalPackages('./testInputs/external-api-json');\r\n      extractor.analyze({\r\n        entryPointFile: path.join(inputFolder, 'index.ts')\r\n      });\r\n\r\n      const apiJsonGenerator: ApiJsonGenerator = new ApiJsonGenerator();\r\n      apiJsonGenerator.writeJsonFile(outputFile, extractor);\r\n\r\n      TestFileComparer.assertFileMatchesExpected(outputFile, expectedFile);\r\n    });\r\n\r\n    it('Example 2', function (): void {\r\n      const inputFolder: string = './testInputs/example2';\r\n      const outputFile: string = './lib/example2-output.json';\r\n      const expectedFile: string = path.join(inputFolder, 'example2-output.json');\r\n\r\n      const compilerOptions: ts.CompilerOptions = {\r\n        target: ts.ScriptTarget.ES5,\r\n        module: ts.ModuleKind.CommonJS,\r\n        moduleResolution: ts.ModuleResolutionKind.NodeJs,\r\n        rootDir: inputFolder,\r\n        typeRoots: ['./'] // We need to ignore @types in these tests\r\n      };\r\n      const extractor: Extractor = new Extractor({\r\n        compilerOptions: compilerOptions,\r\n        errorHandler: testErrorHandler\r\n      });\r\n\r\n      extractor.loadExternalPackages('./testInputs/external-api-json');\r\n      extractor.analyze({\r\n        entryPointFile: path.join(inputFolder, 'src/index.ts')\r\n      });\r\n\r\n      const apiJsonGenerator: ApiJsonGenerator = new ApiJsonGenerator();\r\n      apiJsonGenerator.writeJsonFile(outputFile, extractor);\r\n\r\n      TestFileComparer.assertFileMatchesExpected(outputFile, expectedFile);\r\n    });\r\n\r\n    it('Example 4', function (): void {\r\n      const inputFolder: string = './testInputs/example4';\r\n      const outputFile: string = './lib/example4-output.json';\r\n      const expectedFile: string = path.join(inputFolder, 'example4-output.json');\r\n\r\n      const compilerOptions: ts.CompilerOptions = {\r\n        target: ts.ScriptTarget.ES5,\r\n        module: ts.ModuleKind.CommonJS,\r\n        moduleResolution: ts.ModuleResolutionKind.NodeJs,\r\n        rootDir: inputFolder,\r\n        typeRoots: ['./'] // We need to ignore @types in these tests\r\n      };\r\n      const extractor: Extractor = new Extractor({\r\n        compilerOptions: compilerOptions,\r\n        errorHandler: testErrorHandler\r\n      });\r\n\r\n      extractor.loadExternalPackages('./testInputs/external-api-json');\r\n      extractor.analyze({\r\n        entryPointFile: path.join(inputFolder, 'src/index.ts')\r\n      });\r\n\r\n      const apiJsonGenerator: ApiJsonGenerator = new ApiJsonGenerator();\r\n      apiJsonGenerator.writeJsonFile(outputFile, extractor);\r\n\r\n      TestFileComparer.assertFileMatchesExpected(outputFile, expectedFile);\r\n    });\r\n  });\r\n});\r\n"],"sourceRoot":"..\\..\\..\\src"}