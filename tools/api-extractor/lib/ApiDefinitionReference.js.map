{"version":3,"sources":["ApiDefinitionReference.ts"],"names":[],"mappings":"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","file":"ApiDefinitionReference.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\n/**\r\n * An API definition reference that is used to locate the documentation of exported\r\n * API items that may or may not belong to an external package.\r\n *\r\n * The format of the API definition reference is:\r\n * scopeName/packageName:exportName.memberName\r\n *\r\n * The following are valid API definition references:\r\n * \\@microsoft/sp-core-library:DisplayMode\r\n * \\@microsoft/sp-core-library:Guid\r\n * \\@microsoft/sp-core-library:Guid.equals\r\n * es6-collections:Map\r\n */\r\nexport interface IApiDefinintionReferenceParts {\r\n  /**\r\n   * This is an optional property to denote that a package name is scoped under this name.\r\n   * For example, a common case is when having the '@microsoft' scope name in the\r\n   * API definition reference: '\\@microsoft/sp-core-library'.\r\n   */\r\n  scopeName: string;\r\n  /**\r\n   * The name of the package that the exportName belongs to.\r\n   */\r\n  packageName: string;\r\n  /**\r\n   * The name of the export API item.\r\n   */\r\n  exportName: string;\r\n  /**\r\n   * The name of the member API item.\r\n   */\r\n  memberName: string;\r\n}\r\n\r\n/**\r\n * A scope and package name are semantic information within an API reference expression.\r\n * If there is no scope or package, then the corresponding values will be an empty string.\r\n *\r\n * Example: '@microsoft/Utilities' -> \\{ scope: '@microsoft', package: 'Utilities' \\}\r\n * Example: 'Utilities' -> \\{ scope: '', package: 'Utilities' \\}\r\n */\r\nexport interface IScopedPackageName {\r\n  /**\r\n   * The scope name of an API reference expression.\r\n   */\r\n  scope: string;\r\n\r\n  /**\r\n   * The package name of an API reference expression.\r\n   */\r\n  package: string;\r\n}\r\n\r\n/**\r\n * {@inheritdoc IApiDefinintionReferenceParts}\r\n */\r\nexport default class ApiDefinitionReference {\r\n  /**\r\n   * Splits an API reference expression into two parts, first part is the scopename/packageName and\r\n   * the second part is the exportName.memberName.\r\n   */\r\n  private static _packageRegEx: RegExp = /^([^:]*)\\:(.*)$/;\r\n\r\n  /**\r\n   * Splits the exportName.memberName into two respective parts.\r\n   */\r\n  private static _memberRegEx: RegExp = /^([^.|:]*)(?:\\.(\\w+))?$/;\r\n\r\n  /**\r\n   * Used to ensure that the export name contains only text characters.\r\n   */\r\n  private static _exportRegEx: RegExp =  /^\\w+/;\r\n\r\n  /**\r\n   * {@inheritdoc IApiDefinintionReferenceParts.scopeName}\r\n   */\r\n  public scopeName: string;\r\n  /**\r\n   * {@inheritdoc IApiDefinintionReferenceParts.packageName}\r\n   */\r\n  public packageName: string;\r\n  /**\r\n   * {@inheritdoc IApiDefinintionReferenceParts.exportName}\r\n   */\r\n  public exportName: string;\r\n  /**\r\n   * {@inheritdoc IApiDefinintionReferenceParts.memberName}\r\n   */\r\n  public memberName: string;\r\n\r\n  /**\r\n   * Creates an ApiDefinitionReference instance given strings that symbolize the public\r\n   * properties of ApiDefinitionReference.\r\n   */\r\n  public static createFromParts(parts: IApiDefinintionReferenceParts): ApiDefinitionReference {\r\n    return new ApiDefinitionReference(parts);\r\n  }\r\n\r\n  /**\r\n   * Takes an API reference expression of the form '@scopeName/packageName:exportName.memberName'\r\n   * and deconstructs it into an IApiDefinitionReference interface object.\r\n   * @returns the ApiDefinitionReference, or undefined if an error was reported.\r\n   */\r\n  public static createFromString(apiReferenceExpr: string,\r\n    reportError: (message: string) => void): ApiDefinitionReference | undefined {\r\n    if (!apiReferenceExpr || apiReferenceExpr.split(' ').length > 1) {\r\n      reportError('An API item reference must use the notation: \"@scopeName/packageName:exportName.memberName\"');\r\n      return undefined;\r\n    }\r\n\r\n    const apiDefRefParts: IApiDefinintionReferenceParts = {\r\n      scopeName: '',\r\n      packageName: '',\r\n      exportName: '',\r\n      memberName: ''\r\n    };\r\n\r\n    // E.g. @microsoft/sp-core-library:Guid.equals\r\n    let parts: string[] = apiReferenceExpr.match(ApiDefinitionReference._packageRegEx);\r\n    if (parts) {\r\n      // parts[1] is of the form ‘@microsoft/sp-core-library’ or ‘sp-core-library’\r\n      const scopePackageName: IScopedPackageName = ApiDefinitionReference.parseScopedPackageName(parts[1]);\r\n      apiDefRefParts.scopeName = scopePackageName.scope;\r\n      apiDefRefParts.packageName = scopePackageName.package;\r\n      apiReferenceExpr = parts[2]; // e.g. Guid.equals\r\n    }\r\n\r\n    // E.g. Guid.equals\r\n    parts = apiReferenceExpr.match(ApiDefinitionReference._memberRegEx);\r\n    if (parts) {\r\n      apiDefRefParts.exportName = parts[1]; // e.g. Guid, can never be undefined\r\n      apiDefRefParts.memberName = parts[2] ? parts[2] : ''; // e.g. equals\r\n    } else {\r\n      // the export name is required\r\n      reportError(`The API item reference contains an invalid \"exportName.memberName\"`\r\n        + ` expression: \"${apiReferenceExpr}\"`);\r\n      return undefined;\r\n    }\r\n\r\n    if (!apiReferenceExpr.match(ApiDefinitionReference._exportRegEx)) {\r\n      reportError(`The API item reference contains invalid characters: \"${apiReferenceExpr}\"`);\r\n      return undefined;\r\n    }\r\n\r\n    return ApiDefinitionReference.createFromParts(apiDefRefParts);\r\n  }\r\n\r\n  /**\r\n   * For a scoped NPM package name this separates the scope and package parts.  For example:\r\n   * parseScopedPackageName('@my-scope/myproject') = { scope: '@my-scope', package: 'myproject' }\r\n   * parseScopedPackageName('myproject') = { scope: '', package: 'myproject' }\r\n   */\r\n  public static parseScopedPackageName(scopedName: string): IScopedPackageName {\r\n    if (scopedName.substr(0, 1) !== '@') {\r\n      return { scope: '', package: scopedName };\r\n    }\r\n\r\n    const slashIndex: number = scopedName.indexOf('/');\r\n    if (slashIndex >= 0) {\r\n      return { scope: scopedName.substr(0, slashIndex), package: scopedName.substr(slashIndex + 1) };\r\n    } else {\r\n      throw new Error('Invalid scoped name: ' + scopedName);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Stringifies the ApiDefinitionReferenceOptions up and including the\r\n   * scope and package name.\r\n   *\r\n   * Example output: '@microsoft/Utilities'\r\n   */\r\n  public toScopePackageString(): string {\r\n    let result: string = '';\r\n    if (this.scopeName) {\r\n      result += `${this.scopeName}/${this.packageName}`;\r\n    } else if (this.packageName) {\r\n      result += this.packageName;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Stringifies the ApiDefinitionReferenceOptions up and including the\r\n   * scope, package and export name.\r\n   *\r\n   * Example output: '@microsoft/Utilities.Parse'\r\n   */\r\n  public toExportString(): string {\r\n    let result: string = this.toScopePackageString();\r\n    if (result) {\r\n      result += ':';\r\n    }\r\n    return result + `${this.exportName}`;\r\n  }\r\n\r\n  /**\r\n   * Stringifies the ApiDefinitionReferenceOptions up and including the\r\n   * scope, package, export and member name.\r\n   *\r\n   * Example output: '@microsoft/Utilities.Parse.parseJsonToString'\r\n   */\r\n  public toMemberString(): string {\r\n    return this.toExportString() + `.${this.memberName}`;\r\n  }\r\n\r\n  private constructor(parts: IApiDefinintionReferenceParts) {\r\n    this.scopeName = parts.scopeName;\r\n    this.packageName = parts.packageName;\r\n    this.exportName = parts.exportName;\r\n    this.memberName = parts.memberName;\r\n  }\r\n}"],"sourceRoot":"..\\src"}