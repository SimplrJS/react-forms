{"version":3,"sources":["PrettyPrinter.ts"],"names":[],"mappings":"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","file":"PrettyPrinter.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\n/* tslint:disable:no-bitwise */\r\n\r\nimport * as ts from 'typescript';\r\n/**\r\n  * Some helper functions for formatting certain TypeScript Compiler API expressions.\r\n  */\r\nexport default class PrettyPrinter {\r\n  /**\r\n    * Used for debugging only.  This dumps the TypeScript Compiler's abstract syntax tree.\r\n    */\r\n  public static dumpTree(node: ts.Node, indent: string = ''): void {\r\n    const kindName: string = ts.SyntaxKind[node.kind];\r\n    let trimmedText: string;\r\n\r\n    try {\r\n      trimmedText = node.getText()\r\n        .replace(/[\\r\\n]/g, ' ')\r\n        .replace(/\\s+/g, ' ')\r\n        .trim();\r\n\r\n      if (trimmedText.length > 100) {\r\n        trimmedText = trimmedText.substr(0, 97) + '...';\r\n      }\r\n    } catch (e) {\r\n      trimmedText = '(error getting text)';\r\n    }\r\n\r\n    console.log(`${indent}${kindName}: [${trimmedText}]`);\r\n\r\n    try {\r\n      for (const childNode of node.getChildren()) {\r\n        PrettyPrinter.dumpTree(childNode, indent + '  ');\r\n      }\r\n    } catch (e) {\r\n      // sometimes getChildren() throws an exception\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns a text representation of the enum flags.\r\n   */\r\n  public static getSymbolFlagsString(flags: ts.SymbolFlags): string {\r\n    return PrettyPrinter._getFlagsString(flags, PrettyPrinter._getSymbolFlagString);\r\n  }\r\n\r\n  /**\r\n   * Returns a text representation of the enum flags.\r\n   */\r\n  public static getTypeFlagsString(flags: ts.TypeFlags): string {\r\n    return PrettyPrinter._getFlagsString(flags, PrettyPrinter._getTypeFlagString);\r\n  }\r\n\r\n  /**\r\n    * Returns the first line of a potentially nested declaration.\r\n    * For example, for a class definition this might return\r\n    * \"class Blah<T> extends BaseClass\" without the curly braces.\r\n    * For example, for a function definition, this might return\r\n    * \"test(): void;\" without the curly braces.\r\n    */\r\n  public static getDeclarationSummary(node: ts.Node): string {\r\n    let result: string = '';\r\n    let previousSyntaxKind: ts.SyntaxKind = ts.SyntaxKind.Unknown;\r\n\r\n    for (const childNode of node.getChildren()) {\r\n      switch (childNode.kind) {\r\n        case ts.SyntaxKind.JSDocComment:\r\n          break;\r\n        case ts.SyntaxKind.Block:\r\n          result += ';';\r\n          break;\r\n        default:\r\n          if (PrettyPrinter._wantSpaceAfter(previousSyntaxKind)\r\n            && PrettyPrinter._wantSpaceBefore(childNode.kind)) {\r\n            result += ' ';\r\n          }\r\n          result += childNode.getText();\r\n          previousSyntaxKind = childNode.kind;\r\n          break;\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Throws an exception.  Use this only for unexpected errors, as it may ungracefully terminate the process;\r\n   * ApiItem.reportError() is generally a better option.\r\n   */\r\n  public static throwUnexpectedSyntaxError(errorNode: ts.Node, message: string): void {\r\n    throw new Error(PrettyPrinter.formatFileAndLineNumber(errorNode) + ': ' + message);\r\n  }\r\n\r\n  /**\r\n   * Returns a string such as this, based on the context information in the provided node:\r\n   *   \"[C:\\Folder\\File.ts#123]\"\r\n   */\r\n  public static formatFileAndLineNumber(node: ts.Node): string {\r\n    const sourceFile: ts.SourceFile = node.getSourceFile();\r\n    const lineAndCharacter: ts.LineAndCharacter = sourceFile.getLineAndCharacterOfPosition(node.getStart());\r\n    return `[${sourceFile.fileName}#${lineAndCharacter.line}]`;\r\n  }\r\n\r\n  private static _getSymbolFlagString(flag: ts.SymbolFlags): string {\r\n    return ts.SymbolFlags[flag];\r\n  }\r\n\r\n  private static _getTypeFlagString(flag: ts.TypeFlags): string {\r\n    return ts.TypeFlags[flag];\r\n  }\r\n\r\n  private static _getFlagsString<T>(flags: T, func: (x: T) => string): string {\r\n    /* tslint:disable:no-any */\r\n    let result: string = '';\r\n\r\n    let flag: number = 1;\r\n    for (let bit: number = 0; bit < 32; ++bit) {\r\n      if ((flags as any as number) & flag) {\r\n        if (result !== '') {\r\n          result += ', ';\r\n        }\r\n        result += func(flag as any as T);\r\n      }\r\n      flag <<= 1;\r\n    }\r\n    return result === '' ? '???' : result;\r\n    /* tslint:enable:no-any */\r\n  }\r\n\r\n  private static _wantSpaceAfter(syntaxKind: ts.SyntaxKind): boolean {\r\n    switch (syntaxKind) {\r\n      case ts.SyntaxKind.Unknown:\r\n      case ts.SyntaxKind.OpenParenToken:\r\n      case ts.SyntaxKind.CloseParenToken:\r\n        return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  private static _wantSpaceBefore(syntaxKind: ts.SyntaxKind): boolean {\r\n    switch (syntaxKind) {\r\n      case ts.SyntaxKind.Unknown:\r\n      case ts.SyntaxKind.OpenParenToken:\r\n      case ts.SyntaxKind.CloseParenToken:\r\n      case ts.SyntaxKind.ColonToken:\r\n      case ts.SyntaxKind.SemicolonToken:\r\n        return false;\r\n    }\r\n    return true;\r\n  }\r\n}\r\n"],"sourceRoot":"..\\src"}