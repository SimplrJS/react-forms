{"version":3,"sources":["ExternalApiHelper.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;AAE3D,+BAAiC;AACjC,uBAAyB;AACzB,2BAA6B;AAC7B,uBAAyB;AACzB,yCAAoC;AACpC,kEAA6D;AAE7D;;;;;;;;GAQG;AACH;IAAA;IAmDA,CAAC;IAjDC;;;;;;;OAOG;IACW,iCAAe,GAA7B,UAA8B,OAAe,EAAE,SAAiB,EAAE,uBAA+B;QAC/F,IAAM,eAAe,GAAuB;YAC1C,MAAM,EAAE,EAAE,CAAC,YAAY,CAAC,GAAG;YAC3B,MAAM,EAAE,EAAE,CAAC,UAAU,CAAC,QAAQ;YAC9B,gBAAgB,EAAE,EAAE,CAAC,oBAAoB,CAAC,MAAM;YAChD,sBAAsB,EAAE,IAAI;YAC5B,GAAG,EAAE,EAAE,CAAC,OAAO,CAAC,KAAK;YACrB,OAAO,EAAE,OAAO;SACjB,CAAC;QACF,IAAM,SAAS,GAAc,IAAI,mBAAS,CAAC;YACzC,eAAe,EAAE,eAAe;YAChC,YAAY,EACZ,UAAC,OAAe,EAAE,QAAgB,EAAE,UAAkB;gBACpD,OAAO,CAAC,GAAG,CAAC,uBAAqB,OAAS,GAAG,EAAE,CAAC,GAAG;uBAC/C,OAAK,QAAQ,SAAI,UAAY,CAAA,CAAC,CAAC;YACrC,CAAC;SACF,CAAC,CAAC;QAEH,IAAI,UAAU,GAAW,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;QACvD,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;YAC/B,EAAE,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;QAC3B,CAAC;QAED,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,mBAAmB,CAAC,CAAC;QACxD,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;YAC/B,EAAE,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;QAC3B,CAAC;QAED,IAAM,sBAAsB,GAAW,IAAI,CAAC,OAAO,CAAC,uBAAuB,CAAC,CAAC;QAC7E,IAAM,qBAAqB,GAAW,IAAI,CAAC,IAAI,CAAC,UAAU,EAAK,IAAI,CAAC,QAAQ,CAAC,sBAAsB,CAAC,cAAW,CAAC,CAAC;QACjH,IAAM,cAAc,GAAW,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,uBAAuB,CAAC,CAAC;QAE3E,SAAS,CAAC,OAAO,CAAC;YAChB,cAAc,EAAE,cAAc;YAC9B,UAAU,EAAE,EAAE;SACf,CAAC,CAAC;QAEH,IAAM,gBAAgB,GAAqB,IAAI,0BAAgB,EAAE,CAAC;QAClE,gBAAgB,CAAC,aAAa,CAAC,qBAAqB,EAAE,SAAS,CAAC,CAAC;IAEnE,CAAC;IACH,wBAAC;AAAD,CAnDA,AAmDC,IAAA","file":"ExternalApiHelper.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as ts from 'typescript';\r\nimport * as os from 'os';\r\nimport * as path from 'path';\r\nimport * as fs from 'fs';\r\nimport Extractor from './Extractor';\r\nimport ApiJsonGenerator from './generators/ApiJsonGenerator';\r\n\r\n/**\r\n * ExternalApiHelper has the specific use case of generating an API json file from third party definition files.\r\n * This class is invoked by the gulp-core-build-typescript gulpfile, where the external package names are\r\n * hard wired.\r\n * The job of this method is almost the same as the API Extractor task that is executed on first party packages,\r\n * with the exception that all packages analyzed here are external packages with definition files.\r\n *\r\n * @public\r\n */\r\nexport default class ExternalApiHelper {\r\n\r\n  /**\r\n   * @param rootDir - the absolute path containing a 'package.json' file and is also a parent of the\r\n   * external package file. Ex: build.absolute_build_path.\r\n   * @param libFolder - the path to the lib folder relative to the rootDir, this is where\r\n   * 'external-api-json/external_package.api.json' file will be written. Ex: 'lib'.\r\n   * @param externalPackageFilePath - the path to the '*.d.ts' file of the external package relative to the rootDir.\r\n   * Ex: 'resources/external-api-json/es6-collection/index.t.ds'\r\n   */\r\n  public static generateApiJson(rootDir: string, libFolder: string, externalPackageFilePath: string): void {\r\n    const compilerOptions: ts.CompilerOptions = {\r\n      target: ts.ScriptTarget.ES5,\r\n      module: ts.ModuleKind.CommonJS,\r\n      moduleResolution: ts.ModuleResolutionKind.NodeJs,\r\n      experimentalDecorators: true,\r\n      jsx: ts.JsxEmit.React,\r\n      rootDir: rootDir\r\n    };\r\n    const extractor: Extractor = new Extractor({\r\n      compilerOptions: compilerOptions,\r\n      errorHandler:\r\n      (message: string, fileName: string, lineNumber: number): void => {\r\n        console.log(`TypeScript error: ${message}` + os.EOL\r\n          + `  ${fileName}#${lineNumber}`);\r\n      }\r\n    });\r\n\r\n    let outputPath: string = path.join(rootDir, libFolder);\r\n    if (!fs.existsSync(outputPath)) {\r\n      fs.mkdirSync(outputPath);\r\n    }\r\n\r\n    outputPath = path.join(outputPath, 'external-api-json');\r\n    if (!fs.existsSync(outputPath)) {\r\n      fs.mkdirSync(outputPath);\r\n    }\r\n\r\n    const externalPackageRootDir: string = path.dirname(externalPackageFilePath);\r\n    const outputApiJsonFilePath: string = path.join(outputPath, `${path.basename(externalPackageRootDir)}.api.json`);\r\n    const entryPointFile: string = path.join(rootDir, externalPackageFilePath);\r\n\r\n    extractor.analyze({\r\n      entryPointFile: entryPointFile, // local/bundles/platform-exports.ts',\r\n      otherFiles: []\r\n    });\r\n\r\n    const apiJsonGenerator: ApiJsonGenerator = new ApiJsonGenerator();\r\n    apiJsonGenerator.writeJsonFile(outputApiJsonFilePath, extractor);\r\n\r\n  }\r\n}\r\n"],"sourceRoot":"..\\src"}