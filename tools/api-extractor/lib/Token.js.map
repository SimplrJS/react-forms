{"version":3,"sources":["Token.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;AAE3D;;GAEG;AACH,IAAY,SAqBX;AArBD,WAAY,SAAS;IACnB;;OAEG;IACH,yCAAI,CAAA;IAEJ;;;OAGG;IACH,iDAAQ,CAAA;IAER;;;;;;;OAOG;IACH,mDAAS,CAAA;AACX,CAAC,EArBW,SAAS,GAAT,iBAAS,KAAT,iBAAS,QAqBpB;AAED;;GAEG;AACH;IAkBE,eAAY,IAAe,EAAE,GAAY,EAAE,IAAa;QACtD,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QAClB,IAAI,CAAC,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,CAAC;QAC3B,IAAI,CAAC,KAAK,GAAG,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC;QAC9C,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IAED;;OAEG;IACI,2BAAW,GAAlB,UAAmB,IAAe;QAChC,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,KAAK,IAAI,CAAC,CAAC,CAAC;YACxB,MAAM,IAAI,KAAK,CAAC,mCAAiC,IAAI,CAAC,KAAK,4BAAuB,IAAI,OAAI,CAAC,CAAC;QAC9F,CAAC;IACH,CAAC;IAED,sBAAW,uBAAI;aAAf;YACE,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC;QACpB,CAAC;;;OAAA;IAED,sBAAW,sBAAG;aAAd;YACE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC;QACnB,CAAC;;;OAAA;IAED,sBAAW,uBAAI;aAAf;YACE,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC;QACpB,CAAC;;;OAAA;IAEO,yBAAS,GAAjB,UAAkB,IAAY;QAC5B,MAAM,CAAE,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;IACjG,CAAC;IACH,YAAC;AAAD,CAjDA,AAiDC,IAAA","file":"Token.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\n/**\r\n * Allowed Token types.\r\n */\r\nexport enum TokenType {\r\n  /**\r\n   * A Token that contains only text.\r\n   */\r\n  Text,\r\n\r\n  /**\r\n   * A Token representing an AEDoc block tag.\r\n   * Example: \\@public, \\@remarks, etc.\r\n   */\r\n  BlockTag,\r\n\r\n  /**\r\n   * A Token representing an AEDoc inline tag.  Inline tags must be enclosed in\r\n   * curly braces, which may include parameters.\r\n   *\r\n   * Example:\r\n   * \\{@link http://microosft.com | microsoft home \\}\r\n   * \\{@inheritdoc  @ microsoft/sp-core-library:Guid.newGuid \\}\r\n   */\r\n  InlineTag\r\n}\r\n\r\n/**\r\n * A structured object created from a doc comment string within an AEDoc comment block.\r\n */\r\nexport default class Token {\r\n\r\n  /**\r\n   * The type of the token.\r\n   */\r\n  private _type: TokenType;\r\n\r\n  /**\r\n   * This is not used for Text.\r\n   */\r\n  private _tag: string;\r\n\r\n  /**\r\n   * For inline tags, this is the parameter.\r\n   * For text it is the text.\r\n   */\r\n  private _text: string;\r\n\r\n  constructor(type: TokenType, tag?: string, text?: string) {\r\n    this._type = type;\r\n    this._tag = tag ? tag : '';\r\n    this._text = text ? this._unescape(text) : '';\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Determines if the type is not what we expect.\r\n   */\r\n  public requireType(type: TokenType): void {\r\n    if (this._type !== type) {\r\n      throw new Error(`Encountered a token of type \\\"${this._type}\\\" when expecting \\\"${type}\\\"`);\r\n    }\r\n  }\r\n\r\n  public get type(): TokenType {\r\n    return this._type;\r\n  }\r\n\r\n  public get tag(): string {\r\n    return this._tag;\r\n  }\r\n\r\n  public get text(): string {\r\n    return this._text;\r\n  }\r\n\r\n  private _unescape(text: string): string {\r\n    return  text.replace('\\\\@', '@').replace('\\\\{', '{').replace('\\\\\\\\', '\\\\').replace('\\\\}', '}');\r\n  }\r\n}"],"sourceRoot":"..\\src"}