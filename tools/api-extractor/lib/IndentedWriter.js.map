{"version":3,"sources":["IndentedWriter.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;AAE3D;;;;;;;;;;;;;;;;;;;;;;IAsBI;AACJ;IAAA;QACU,YAAO,GAAW,EAAE,CAAC;QACrB,iBAAY,GAAa,EAAE,CAAC;QAC5B,gBAAW,GAAW,EAAE,CAAC;QACzB,iBAAY,GAAY,IAAI,CAAC;IAsFvC,CAAC;IApFC;;OAEG;IACI,iCAAQ,GAAf;QACE,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC;IACtB,CAAC;IAED;;;;;;OAMG;IACI,uCAAc,GAArB,UAAsB,MAAqB;QAArB,uBAAA,EAAA,aAAqB;QACzC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAC/B,IAAI,CAAC,iBAAiB,EAAE,CAAC;IAC3B,CAAC;IAED;;;OAGG;IACI,uCAAc,GAArB;QACE,IAAI,CAAC,YAAY,CAAC,GAAG,EAAE,CAAC;QACxB,IAAI,CAAC,iBAAiB,EAAE,CAAC;IAC3B,CAAC;IAED;;;OAGG;IACI,oCAAW,GAAlB,UAAmB,KAAiB;QAClC,IAAI,CAAC,cAAc,EAAE,CAAC;QACtB,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,cAAc,EAAE,CAAC;IACxB,CAAC;IAED;;;;OAIG;IACI,8BAAK,GAAZ,UAAa,OAAe;QAC1B,IAAI,KAAK,GAAY,IAAI,CAAC;QAC1B,GAAG,CAAC,CAAmB,UAAmB,EAAnB,KAAA,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,EAAnB,cAAmB,EAAnB,IAAmB;YAArC,IAAM,QAAQ,SAAA;YACjB,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gBACX,IAAI,CAAC,aAAa,EAAE,CAAC;YACvB,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,KAAK,GAAG,KAAK,CAAC;YAChB,CAAC;YACD,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACb,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;YAChC,CAAC;SACF;IACH,CAAC;IAED;;;OAGG;IACI,kCAAS,GAAhB,UAAiB,OAAoB;QAApB,wBAAA,EAAA,YAAoB;QACnC,IAAI,CAAC,KAAK,CAAC,OAAO,GAAG,IAAI,CAAC,CAAC;IAC7B,CAAC;IAED;;OAEG;IACK,uCAAc,GAAtB,UAAuB,OAAe;QACpC,EAAE,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;YACtB,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,WAAW,CAAC;YACjC,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;QAC5B,CAAC;QACD,IAAI,CAAC,OAAO,IAAI,OAAO,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;IAC7C,CAAC;IAEO,sCAAa,GAArB;QACE,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC;QACrB,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;IAC3B,CAAC;IAEO,0CAAiB,GAAzB;QACE,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IAChD,CAAC;IACH,qBAAC;AAAD,CA1FA,AA0FC,IAAA","file":"IndentedWriter.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\n/**\r\n  * A utility for writing indented text.  In the current implementation,\r\n  * IndentedWriter builds up an internal string buffer, which can be obtained\r\n  * by calling IndentedWriter.getOutput().\r\n  *\r\n  * Note that the indentation is inserted at the last possible opportunity.\r\n  * For example, this code...\r\n  *\r\n  *   writer.write('begin\\n');\r\n  *   writer.increaseIndent();\r\n  *   writer.Write('one\\ntwo\\n');\r\n  *   writer.decreaseIndent();\r\n  *   writer.increaseIndent();\r\n  *   writer.decreaseIndent();\r\n  *   writer.Write('end');\r\n  *\r\n  * ...would produce this output:\r\n  *\r\n  *   begin\r\n  *     one\r\n  *     two\r\n  *   end\r\n  */\r\nexport default class IndentedWriter {\r\n  private _output: string = '';\r\n  private _indentStack: string[] = [];\r\n  private _indentText: string = '';\r\n  private _needsIndent: boolean = true;\r\n\r\n  /**\r\n   * Retrieves the indented output.\r\n   */\r\n  public toString(): string {\r\n    return this._output;\r\n  }\r\n\r\n  /**\r\n   * Increases the indentation.  Normally the indentation is two spaces,\r\n   * however an arbitrary prefix can optional be specified.  (For example,\r\n   * the prefix could be \"// \" to indent and comment simultaneously.)\r\n   * Each call to IndentedWriter.increaseIndent() must be followed by a\r\n   * corresponding call to IndentedWriter.decreaseIndent().\r\n   */\r\n  public increaseIndent(prefix: string = '  '): void {\r\n    this._indentStack.push(prefix);\r\n    this._updateIndentText();\r\n  }\r\n\r\n  /**\r\n   * Decreases the indentation, reverting the effect of the corresponding call\r\n   * to IndentedWriter.increaseIndent().\r\n   */\r\n  public decreaseIndent(): void {\r\n    this._indentStack.pop();\r\n    this._updateIndentText();\r\n  }\r\n\r\n  /**\r\n   * A shorthand for ensuring that increaseIndent()/decreaseIndent() occur\r\n   * in pairs.\r\n   */\r\n  public indentScope(scope: () => void): void {\r\n    this.increaseIndent();\r\n    scope();\r\n    this.decreaseIndent();\r\n  }\r\n\r\n  /**\r\n   * Writes some text to the internal string buffer, applying indentation according\r\n   * to the current indentation level.  If the string contains multiple newlines,\r\n   * each line will be indented separately.\r\n   */\r\n  public write(message: string): void {\r\n    let first: boolean = true;\r\n    for (const linePart of message.split('\\n')) {\r\n      if (!first) {\r\n        this._writeNewLine();\r\n      } else {\r\n        first = false;\r\n      }\r\n      if (linePart) {\r\n        this._writeLinePart(linePart);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * A shorthand for writing an optional message, followed by a newline.\r\n   * Indentation is applied following the semantics of IndentedWriter.write().\r\n   */\r\n  public writeLine(message: string = ''): void {\r\n    this.write(message + '\\n');\r\n  }\r\n\r\n  /**\r\n   * Writes a string that does not contain any newline characters.\r\n   */\r\n  private _writeLinePart(message: string): void {\r\n    if (this._needsIndent) {\r\n      this._output += this._indentText;\r\n      this._needsIndent = false;\r\n    }\r\n    this._output += message.replace(/\\r/g, '');\r\n  }\r\n\r\n  private _writeNewLine(): void {\r\n    this._output += '\\n';\r\n    this._needsIndent = true;\r\n  }\r\n\r\n  private _updateIndentText(): void {\r\n    this._indentText = this._indentStack.join('');\r\n  }\r\n}\r\n"],"sourceRoot":"..\\src"}