{"version":3,"sources":["test/DocItemLoader.test.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;AAE3D,+BAA+B;AAE/B,6BAA8B;AAC9B,+BAAiC;AACjC,2BAA6B;AAC7B,0CAAqC;AACrC,wDAAmD;AACnD,mEAA8D;AAC9D,mEAA8D;AAC9D,uFAAuF;AAEvF,IAAM,cAAc,GAId,EAAE,CAAC;AAET,0BAA0B,OAAe,EAAE,QAAgB,EAAE,UAAkB;IAC7E,cAAc,CAAC,IAAI,CAAC,EAAE,OAAO,SAAA,EAAE,QAAQ,UAAA,EAAE,UAAU,YAAA,EAAE,CAAC,CAAC;AACzD,CAAC;AAED,8BAA8B,gBAA0B;IACtD,aAAM,CAAC,SAAS,CAAC,cAAc,CAAC,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,OAAO,EAAT,CAAS,CAAC,EAAE,gBAAgB,EACnE,wDAAwD,CAAC,CAAC;AAC9D,CAAC;AAED,yDAAyD;AACzD,2CAA2C;AAC3C,IAAM,QAAQ,GAAa,EAAE,CAAC;AAE9B,QAAQ,CAAC,qBAAqB,EAAE;IAC9B,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;IAEpB,QAAQ,CAAC,aAAa,EAAE;QACtB,EAAE,CAAC,WAAW,EAAE;YACd,IAAM,WAAW,GAAW,uBAAuB,CAAC;YACpD,IAAM,cAAc,GAAW,4BAA4B,CAAC;YAC5D,IAAM,aAAa,GAAW,8BAA8B,CAAC;YAC7D,IAAM,gBAAgB,GAAW,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,sBAAsB,CAAC,CAAC;YAChF,IAAM,eAAe,GAAW,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,wBAAwB,CAAC,CAAC;YAEjF,IAAM,eAAe,GAAuB;gBAC1C,MAAM,EAAE,EAAE,CAAC,YAAY,CAAC,GAAG;gBAC3B,MAAM,EAAE,EAAE,CAAC,UAAU,CAAC,QAAQ;gBAC9B,gBAAgB,EAAE,EAAE,CAAC,oBAAoB,CAAC,MAAM;gBAChD,OAAO,EAAE,WAAW;gBACpB,SAAS,EAAE,CAAC,IAAI,CAAC,CAAC,0CAA0C;aAC7D,CAAC;YACF,IAAM,SAAS,GAAc,IAAI,mBAAS,CAAC;gBACzC,eAAe,EAAE,eAAe;gBAChC,YAAY,EAAE,gBAAgB;aAC/B,CAAC,CAAC;YAEH,SAAS,CAAC,oBAAoB,CAAC,gCAAgC,CAAC,CAAC;YACjE,SAAS,CAAC,OAAO,CAAC;gBAChB,cAAc,EAAE,oCAAoC;aACrD,CAAC,CAAC;YAEH,IAAM,gBAAgB,GAAqB,IAAI,0BAAgB,EAAE,CAAC;YAClE,gBAAgB,CAAC,aAAa,CAAC,cAAc,EAAE,SAAS,CAAC,CAAC;YAE1D,6DAA6D;YAC7D,+DAA+D;YAC/D,oFAAoF;YACpF,sBAAsB;YACtB,IAAM,gBAAgB,GAAqB,IAAI,0BAAgB,EAAE,CAAC;YAClE,gBAAgB,CAAC,YAAY,CAAC,aAAa,EAAE,SAAS,CAAC,CAAC;YAExD,oBAAoB,CAAC;gBACnB,oBAAoB;gBACpB,6DAA6D;sBACzD,uDAAuD;aAC5D,CAAC,CAAC;YACH,0BAAgB,CAAC,yBAAyB,CAAC,cAAc,EAAE,gBAAgB,CAAC,CAAC;YAC7E,0BAAgB,CAAC,yBAAyB,CAAC,aAAa,EAAE,eAAe,CAAC,CAAC;QAC7E,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","file":"test/DocItemLoader.test.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\n/// <reference types=\"mocha\" />\r\n\r\nimport { assert } from 'chai';\r\nimport * as ts from 'typescript';\r\nimport * as path from 'path';\r\nimport Extractor from '../Extractor';\r\nimport TestFileComparer from '../TestFileComparer';\r\nimport ApiJsonGenerator from '../generators/ApiJsonGenerator';\r\nimport ApiFileGenerator from '../generators/ApiFileGenerator';\r\n/* tslint:disable:no-function-expression - Mocha uses a poorly scoped \"this\" pointer */\r\n\r\nconst capturedErrors: {\r\n  message: string;\r\n  fileName: string;\r\n  lineNumber: number;\r\n}[] = [];\r\n\r\nfunction testErrorHandler(message: string, fileName: string, lineNumber: number): void {\r\n  capturedErrors.push({ message, fileName, lineNumber });\r\n}\r\n\r\nfunction assertCapturedErrors(expectedMessages: string[]): void {\r\n  assert.deepEqual(capturedErrors.map(x => x.message), expectedMessages,\r\n    'The captured errors did not match the expected output.');\r\n}\r\n\r\n// These warnings would normally be printed at the bottom\r\n// of the source package's '*.api.ts' file.\r\nconst warnings: string[] = [];\r\n\r\ndescribe('DocItemLoader tests', function (): void {\r\n  this.timeout(10000);\r\n\r\n  describe('Basic Tests', function (): void {\r\n    it('Example 3', function (): void {\r\n      const inputFolder: string = './testInputs/example3';\r\n      const outputJsonFile: string = './lib/example3-output.json';\r\n      const outputApiFile: string = './lib/example3-output.api.ts';\r\n      const expectedJsonFile: string = path.join(inputFolder, 'example3-output.json');\r\n      const expectedApiFile: string = path.join(inputFolder, 'example3-output.api.ts');\r\n\r\n      const compilerOptions: ts.CompilerOptions = {\r\n        target: ts.ScriptTarget.ES5,\r\n        module: ts.ModuleKind.CommonJS,\r\n        moduleResolution: ts.ModuleResolutionKind.NodeJs,\r\n        rootDir: inputFolder,\r\n        typeRoots: ['./'] // We need to ignore @types in these tests\r\n      };\r\n      const extractor: Extractor = new Extractor({\r\n        compilerOptions: compilerOptions,\r\n        errorHandler: testErrorHandler\r\n      });\r\n\r\n      extractor.loadExternalPackages('./testInputs/external-api-json');\r\n      extractor.analyze({\r\n        entryPointFile: './testInputs/example3/src/index.ts'\r\n      });\r\n\r\n      const apiJsonGenerator: ApiJsonGenerator = new ApiJsonGenerator();\r\n      apiJsonGenerator.writeJsonFile(outputJsonFile, extractor);\r\n\r\n      // This is one error whose output is only visible in the form\r\n      // of a 'warning' message in the 'example3-output.api.ts' file.\r\n      // 'Unable to find referenced member \\\"MyClass.methodWithTwoParams\\\"' is the message\r\n      // that should appear.\r\n      const apiFileGenerator: ApiFileGenerator = new ApiFileGenerator();\r\n      apiFileGenerator.writeApiFile(outputApiFile, extractor);\r\n\r\n      assertCapturedErrors([\r\n        'circular reference',\r\n        'The {@link} tag references an @internal or @alpha API item,'\r\n          + ' which will not appear in the generated documentation'\r\n      ]);\r\n      TestFileComparer.assertFileMatchesExpected(outputJsonFile, expectedJsonFile);\r\n      TestFileComparer.assertFileMatchesExpected(outputApiFile, expectedApiFile);\r\n    });\r\n  });\r\n});\r\n"],"sourceRoot":"..\\..\\src"}