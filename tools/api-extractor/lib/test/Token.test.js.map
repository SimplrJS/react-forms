{"version":3,"sources":["test/Token.test.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;AAE3D,+BAA+B;AAE/B,6BAA8B;AAC9B,kCAA4C;AAE5C,uFAAuF;AAEvF,QAAQ,CAAC,aAAa,EAAE;IACtB,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;IAEpB,QAAQ,CAAC,eAAe,EAAE;QAExB,EAAE,CAAC,eAAe,EAAE;YAClB,IAAI,KAAY,CAAC;YAEjB,KAAK,GAAI,IAAI,eAAK,CAAC,iBAAS,CAAC,IAAI,EAAE,EAAE,EAAE,WAAW,CAAC,CAAC;YACpD,aAAM,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,EAAE,iBAAS,CAAC,IAAI,CAAC,CAAC;YACzC,aAAM,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;YAC5B,aAAM,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC;YAEtC,KAAK,GAAG,IAAI,eAAK,CAAC,iBAAS,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;YAC/C,aAAM,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,EAAE,iBAAS,CAAC,QAAQ,CAAC,CAAC;YAC7C,aAAM,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;YACjC,aAAM,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;YAE7B,KAAK,GAAG,IAAI,eAAK,CAAC,iBAAS,CAAC,SAAS,EAAE,OAAO,EAAE,0BAA0B,CAAC,CAAC;YAC5E,aAAM,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,EAAE,iBAAS,CAAC,SAAS,CAAC,CAAC;YAC9C,aAAM,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;YACjC,aAAM,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,EAAE,0BAA0B,CAAC,CAAC;QACvD,CAAC,CAAC,CAAC;QAEL,EAAE,CAAC,kCAAkC,EAAE;YACnC,IAAI,KAAY,CAAC;YAEjB,KAAK,GAAI,IAAI,eAAK,CAAC,iBAAS,CAAC,IAAI,EAAE,EAAE,EAAE,WAAW,CAAC,CAAC;YACpD,IAAI,WAAW,GAAY,KAAK,CAAC;YACjC,IAAI,CAAC;gBACH,KAAK,CAAC,WAAW,CAAC,iBAAS,CAAC,IAAI,CAAC,CAAC;YACpC,CAAC;YAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gBACf,WAAW,GAAG,IAAI,CAAC;YACrB,CAAC;YACD,aAAM,CAAC,KAAK,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC;YAEjC,IAAI,CAAC;gBACH,KAAK,CAAC,WAAW,CAAC,iBAAS,CAAC,QAAQ,CAAC,CAAC;YACxC,CAAC;YAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gBACf,WAAW,GAAG,IAAI,CAAC;YACrB,CAAC;YACD,aAAM,CAAC,KAAK,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC;QAClC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","file":"test/Token.test.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\n/// <reference types=\"mocha\" />\r\n\r\nimport { assert } from 'chai';\r\nimport Token, { TokenType } from '../Token';\r\n\r\n/* tslint:disable:no-function-expression - Mocha uses a poorly scoped \"this\" pointer */\r\n\r\ndescribe('Token tests', function (): void {\r\n  this.timeout(10000);\r\n\r\n  describe('Token methods', function (): void {\r\n\r\n    it('constructor()', function (): void {\r\n      let token: Token;\r\n\r\n      token =  new Token(TokenType.Text, '', 'Some text');\r\n      assert.equal(token.type, TokenType.Text);\r\n      assert.equal(token.tag, '');\r\n      assert.equal(token.text, 'Some text');\r\n\r\n      token = new Token(TokenType.BlockTag, '@tagA');\r\n      assert.equal(token.type, TokenType.BlockTag);\r\n      assert.equal(token.tag, '@tagA');\r\n      assert.equal(token.text, '');\r\n\r\n      token = new Token(TokenType.InlineTag, '@link', 'http://www.microsoft.com');\r\n      assert.equal(token.type, TokenType.InlineTag);\r\n      assert.equal(token.tag, '@link');\r\n      assert.equal(token.text, 'http://www.microsoft.com');\r\n    });\r\n\r\n  it('RequireType() should raise error', function (): void {\r\n      let token: Token;\r\n\r\n      token =  new Token(TokenType.Text, '', 'Some text');\r\n      let errorThrown: boolean = false;\r\n      try {\r\n        token.requireType(TokenType.Text);\r\n      } catch (error) {\r\n        errorThrown = true;\r\n      }\r\n      assert.equal(errorThrown, false);\r\n\r\n      try {\r\n        token.requireType(TokenType.BlockTag);\r\n      } catch (error) {\r\n        errorThrown = true;\r\n      }\r\n      assert.equal(errorThrown, true);\r\n    });\r\n  });\r\n});\r\n"],"sourceRoot":"..\\..\\src"}